//
// Generated by Bluespec Compiler (build cd96b228)
//
// On Sun May 23 22:57:07 IST 2021
//
//
// Ports:
// Name                         I/O  size props
// RDY_put                        O     1
// get                            O    24 reg
// RDY_get                        O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// put_x                          I    24
// EN_put                         I     1
// EN_get                         I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkBubbleSort_nt_UInt20(CLK,
			      RST_N,

			      put_x,
			      EN_put,
			      RDY_put,

			      EN_get,
			      get,
			      RDY_get);
  input  CLK;
  input  RST_N;

  // action method put
  input  [23 : 0] put_x;
  input  EN_put;
  output RDY_put;

  // actionvalue method get
  input  EN_get;
  output [23 : 0] get;
  output RDY_get;

  // signals for module outputs
  wire [23 : 0] get;
  wire RDY_get, RDY_put;

  // register m_arr_0
  reg [24 : 0] m_arr_0;
  wire [24 : 0] m_arr_0$D_IN;
  wire m_arr_0$EN;

  // register m_arr_1
  reg [24 : 0] m_arr_1;
  wire [24 : 0] m_arr_1$D_IN;
  wire m_arr_1$EN;

  // register m_arr_10
  reg [24 : 0] m_arr_10;
  wire [24 : 0] m_arr_10$D_IN;
  wire m_arr_10$EN;

  // register m_arr_11
  reg [24 : 0] m_arr_11;
  wire [24 : 0] m_arr_11$D_IN;
  wire m_arr_11$EN;

  // register m_arr_12
  reg [24 : 0] m_arr_12;
  wire [24 : 0] m_arr_12$D_IN;
  wire m_arr_12$EN;

  // register m_arr_13
  reg [24 : 0] m_arr_13;
  wire [24 : 0] m_arr_13$D_IN;
  wire m_arr_13$EN;

  // register m_arr_14
  reg [24 : 0] m_arr_14;
  wire [24 : 0] m_arr_14$D_IN;
  wire m_arr_14$EN;

  // register m_arr_15
  reg [24 : 0] m_arr_15;
  wire [24 : 0] m_arr_15$D_IN;
  wire m_arr_15$EN;

  // register m_arr_16
  reg [24 : 0] m_arr_16;
  wire [24 : 0] m_arr_16$D_IN;
  wire m_arr_16$EN;

  // register m_arr_17
  reg [24 : 0] m_arr_17;
  wire [24 : 0] m_arr_17$D_IN;
  wire m_arr_17$EN;

  // register m_arr_18
  reg [24 : 0] m_arr_18;
  wire [24 : 0] m_arr_18$D_IN;
  wire m_arr_18$EN;

  // register m_arr_19
  reg [24 : 0] m_arr_19;
  reg [24 : 0] m_arr_19$D_IN;
  wire m_arr_19$EN;

  // register m_arr_2
  reg [24 : 0] m_arr_2;
  wire [24 : 0] m_arr_2$D_IN;
  wire m_arr_2$EN;

  // register m_arr_3
  reg [24 : 0] m_arr_3;
  wire [24 : 0] m_arr_3$D_IN;
  wire m_arr_3$EN;

  // register m_arr_4
  reg [24 : 0] m_arr_4;
  wire [24 : 0] m_arr_4$D_IN;
  wire m_arr_4$EN;

  // register m_arr_5
  reg [24 : 0] m_arr_5;
  wire [24 : 0] m_arr_5$D_IN;
  wire m_arr_5$EN;

  // register m_arr_6
  reg [24 : 0] m_arr_6;
  wire [24 : 0] m_arr_6$D_IN;
  wire m_arr_6$EN;

  // register m_arr_7
  reg [24 : 0] m_arr_7;
  wire [24 : 0] m_arr_7$D_IN;
  wire m_arr_7$EN;

  // register m_arr_8
  reg [24 : 0] m_arr_8;
  wire [24 : 0] m_arr_8$D_IN;
  wire m_arr_8$EN;

  // register m_arr_9
  reg [24 : 0] m_arr_9;
  wire [24 : 0] m_arr_9$D_IN;
  wire m_arr_9$EN;

  // register m_counter
  reg [15 : 0] m_counter;
  wire [15 : 0] m_counter$D_IN;
  wire m_counter$EN;

  // rule scheduling signals
  wire WILL_FIRE_RL_m_rl_swap_i,
       WILL_FIRE_RL_m_rl_swap_i_1,
       WILL_FIRE_RL_m_rl_swap_i_10,
       WILL_FIRE_RL_m_rl_swap_i_11,
       WILL_FIRE_RL_m_rl_swap_i_12,
       WILL_FIRE_RL_m_rl_swap_i_13,
       WILL_FIRE_RL_m_rl_swap_i_14,
       WILL_FIRE_RL_m_rl_swap_i_15,
       WILL_FIRE_RL_m_rl_swap_i_16,
       WILL_FIRE_RL_m_rl_swap_i_17,
       WILL_FIRE_RL_m_rl_swap_i_18,
       WILL_FIRE_RL_m_rl_swap_i_2,
       WILL_FIRE_RL_m_rl_swap_i_3,
       WILL_FIRE_RL_m_rl_swap_i_4,
       WILL_FIRE_RL_m_rl_swap_i_5,
       WILL_FIRE_RL_m_rl_swap_i_6,
       WILL_FIRE_RL_m_rl_swap_i_7,
       WILL_FIRE_RL_m_rl_swap_i_8,
       WILL_FIRE_RL_m_rl_swap_i_9;

  // inputs to muxes for submodule ports
  wire [24 : 0] MUX_m_arr_19$write_1__VAL_3;
  wire [15 : 0] MUX_m_counter$write_1__VAL_2;
  wire MUX_m_counter$write_1__SEL_1;

  // remaining internal signals
  wire IF_m_arr_0_BIT_24_THEN_m_arr_0_BITS_23_TO_0_EL_ETC___d10,
       IF_m_arr_10_5_BIT_24_6_THEN_m_arr_10_5_BITS_23_ETC___d110,
       IF_m_arr_11_05_BIT_24_06_THEN_m_arr_11_05_BITS_ETC___d120,
       IF_m_arr_12_15_BIT_24_16_THEN_m_arr_12_15_BITS_ETC___d130,
       IF_m_arr_13_25_BIT_24_26_THEN_m_arr_13_25_BITS_ETC___d140,
       IF_m_arr_14_35_BIT_24_36_THEN_m_arr_14_35_BITS_ETC___d150,
       IF_m_arr_15_45_BIT_24_46_THEN_m_arr_15_45_BITS_ETC___d160,
       IF_m_arr_16_55_BIT_24_56_THEN_m_arr_16_55_BITS_ETC___d170,
       IF_m_arr_17_65_BIT_24_66_THEN_m_arr_17_65_BITS_ETC___d180,
       IF_m_arr_18_75_BIT_24_76_THEN_m_arr_18_75_BITS_ETC___d190,
       IF_m_arr_1_BIT_24_THEN_m_arr_1_BITS_23_TO_0_EL_ETC___d20,
       IF_m_arr_2_5_BIT_24_6_THEN_m_arr_2_5_BITS_23_T_ETC___d30,
       IF_m_arr_3_5_BIT_24_6_THEN_m_arr_3_5_BITS_23_T_ETC___d40,
       IF_m_arr_4_5_BIT_24_6_THEN_m_arr_4_5_BITS_23_T_ETC___d50,
       IF_m_arr_5_5_BIT_24_6_THEN_m_arr_5_5_BITS_23_T_ETC___d60,
       IF_m_arr_6_5_BIT_24_6_THEN_m_arr_6_5_BITS_23_T_ETC___d70,
       IF_m_arr_7_5_BIT_24_6_THEN_m_arr_7_5_BITS_23_T_ETC___d80,
       IF_m_arr_8_5_BIT_24_6_THEN_m_arr_8_5_BITS_23_T_ETC___d90,
       IF_m_arr_9_5_BIT_24_6_THEN_m_arr_9_5_BITS_23_T_ETC___d100,
       m_counter_96_EQ_20_01_AND_NOT_m_arr_1_BIT_24_2_ETC___d207,
       m_counter_96_EQ_20_01_AND_NOT_m_arr_1_BIT_24_2_ETC___d219,
       m_counter_96_EQ_20_01_AND_NOT_m_arr_1_BIT_24_2_ETC___d231,
       m_counter_96_EQ_20_01_AND_NOT_m_arr_1_BIT_24_2_ETC___d243,
       m_counter_96_EQ_20_01_AND_NOT_m_arr_1_BIT_24_2_ETC___d255,
       m_counter_96_EQ_20_01_AND_NOT_m_arr_1_BIT_24_2_ETC___d267;

  // action method put
  assign RDY_put = m_counter < 16'd20 && !m_arr_19[24] ;

  // actionvalue method get
  assign get = m_arr_0[23:0] ;
  assign RDY_get =
	     m_arr_0[24] &&
	     m_counter_96_EQ_20_01_AND_NOT_m_arr_1_BIT_24_2_ETC___d267 &&
	     ((m_arr_17[24] && m_arr_18[24]) ?
		IF_m_arr_17_65_BIT_24_66_THEN_m_arr_17_65_BITS_ETC___d180 :
		m_arr_17[24] || !m_arr_18[24]) &&
	     ((m_arr_18[24] && m_arr_19[24]) ?
		IF_m_arr_18_75_BIT_24_76_THEN_m_arr_18_75_BITS_ETC___d190 :
		m_arr_18[24] || !m_arr_19[24]) ;

  // rule RL_m_rl_swap_i
  assign WILL_FIRE_RL_m_rl_swap_i =
	     (m_arr_0[24] && m_arr_1[24]) ?
	       !IF_m_arr_0_BIT_24_THEN_m_arr_0_BITS_23_TO_0_EL_ETC___d10 :
	       !m_arr_0[24] && m_arr_1[24] ;

  // rule RL_m_rl_swap_i_1
  assign WILL_FIRE_RL_m_rl_swap_i_1 =
	     ((m_arr_1[24] && m_arr_2[24]) ?
		!IF_m_arr_1_BIT_24_THEN_m_arr_1_BITS_23_TO_0_EL_ETC___d20 :
		!m_arr_1[24] && m_arr_2[24]) &&
	     !WILL_FIRE_RL_m_rl_swap_i ;

  // rule RL_m_rl_swap_i_2
  assign WILL_FIRE_RL_m_rl_swap_i_2 =
	     ((m_arr_2[24] && m_arr_3[24]) ?
		!IF_m_arr_2_5_BIT_24_6_THEN_m_arr_2_5_BITS_23_T_ETC___d30 :
		!m_arr_2[24] && m_arr_3[24]) &&
	     !WILL_FIRE_RL_m_rl_swap_i_1 ;

  // rule RL_m_rl_swap_i_3
  assign WILL_FIRE_RL_m_rl_swap_i_3 =
	     ((m_arr_3[24] && m_arr_4[24]) ?
		!IF_m_arr_3_5_BIT_24_6_THEN_m_arr_3_5_BITS_23_T_ETC___d40 :
		!m_arr_3[24] && m_arr_4[24]) &&
	     !WILL_FIRE_RL_m_rl_swap_i_2 ;

  // rule RL_m_rl_swap_i_4
  assign WILL_FIRE_RL_m_rl_swap_i_4 =
	     ((m_arr_4[24] && m_arr_5[24]) ?
		!IF_m_arr_4_5_BIT_24_6_THEN_m_arr_4_5_BITS_23_T_ETC___d50 :
		!m_arr_4[24] && m_arr_5[24]) &&
	     !WILL_FIRE_RL_m_rl_swap_i_3 ;

  // rule RL_m_rl_swap_i_5
  assign WILL_FIRE_RL_m_rl_swap_i_5 =
	     ((m_arr_5[24] && m_arr_6[24]) ?
		!IF_m_arr_5_5_BIT_24_6_THEN_m_arr_5_5_BITS_23_T_ETC___d60 :
		!m_arr_5[24] && m_arr_6[24]) &&
	     !WILL_FIRE_RL_m_rl_swap_i_4 ;

  // rule RL_m_rl_swap_i_6
  assign WILL_FIRE_RL_m_rl_swap_i_6 =
	     ((m_arr_6[24] && m_arr_7[24]) ?
		!IF_m_arr_6_5_BIT_24_6_THEN_m_arr_6_5_BITS_23_T_ETC___d70 :
		!m_arr_6[24] && m_arr_7[24]) &&
	     !WILL_FIRE_RL_m_rl_swap_i_5 ;

  // rule RL_m_rl_swap_i_7
  assign WILL_FIRE_RL_m_rl_swap_i_7 =
	     ((m_arr_7[24] && m_arr_8[24]) ?
		!IF_m_arr_7_5_BIT_24_6_THEN_m_arr_7_5_BITS_23_T_ETC___d80 :
		!m_arr_7[24] && m_arr_8[24]) &&
	     !WILL_FIRE_RL_m_rl_swap_i_6 ;

  // rule RL_m_rl_swap_i_8
  assign WILL_FIRE_RL_m_rl_swap_i_8 =
	     ((m_arr_8[24] && m_arr_9[24]) ?
		!IF_m_arr_8_5_BIT_24_6_THEN_m_arr_8_5_BITS_23_T_ETC___d90 :
		!m_arr_8[24] && m_arr_9[24]) &&
	     !WILL_FIRE_RL_m_rl_swap_i_7 ;

  // rule RL_m_rl_swap_i_9
  assign WILL_FIRE_RL_m_rl_swap_i_9 =
	     ((m_arr_9[24] && m_arr_10[24]) ?
		!IF_m_arr_9_5_BIT_24_6_THEN_m_arr_9_5_BITS_23_T_ETC___d100 :
		!m_arr_9[24] && m_arr_10[24]) &&
	     !WILL_FIRE_RL_m_rl_swap_i_8 ;

  // rule RL_m_rl_swap_i_10
  assign WILL_FIRE_RL_m_rl_swap_i_10 =
	     ((m_arr_10[24] && m_arr_11[24]) ?
		!IF_m_arr_10_5_BIT_24_6_THEN_m_arr_10_5_BITS_23_ETC___d110 :
		!m_arr_10[24] && m_arr_11[24]) &&
	     !WILL_FIRE_RL_m_rl_swap_i_9 ;

  // rule RL_m_rl_swap_i_11
  assign WILL_FIRE_RL_m_rl_swap_i_11 =
	     ((m_arr_11[24] && m_arr_12[24]) ?
		!IF_m_arr_11_05_BIT_24_06_THEN_m_arr_11_05_BITS_ETC___d120 :
		!m_arr_11[24] && m_arr_12[24]) &&
	     !WILL_FIRE_RL_m_rl_swap_i_10 ;

  // rule RL_m_rl_swap_i_12
  assign WILL_FIRE_RL_m_rl_swap_i_12 =
	     ((m_arr_12[24] && m_arr_13[24]) ?
		!IF_m_arr_12_15_BIT_24_16_THEN_m_arr_12_15_BITS_ETC___d130 :
		!m_arr_12[24] && m_arr_13[24]) &&
	     !WILL_FIRE_RL_m_rl_swap_i_11 ;

  // rule RL_m_rl_swap_i_13
  assign WILL_FIRE_RL_m_rl_swap_i_13 =
	     ((m_arr_13[24] && m_arr_14[24]) ?
		!IF_m_arr_13_25_BIT_24_26_THEN_m_arr_13_25_BITS_ETC___d140 :
		!m_arr_13[24] && m_arr_14[24]) &&
	     !WILL_FIRE_RL_m_rl_swap_i_12 ;

  // rule RL_m_rl_swap_i_14
  assign WILL_FIRE_RL_m_rl_swap_i_14 =
	     ((m_arr_14[24] && m_arr_15[24]) ?
		!IF_m_arr_14_35_BIT_24_36_THEN_m_arr_14_35_BITS_ETC___d150 :
		!m_arr_14[24] && m_arr_15[24]) &&
	     !WILL_FIRE_RL_m_rl_swap_i_13 ;

  // rule RL_m_rl_swap_i_15
  assign WILL_FIRE_RL_m_rl_swap_i_15 =
	     ((m_arr_15[24] && m_arr_16[24]) ?
		!IF_m_arr_15_45_BIT_24_46_THEN_m_arr_15_45_BITS_ETC___d160 :
		!m_arr_15[24] && m_arr_16[24]) &&
	     !WILL_FIRE_RL_m_rl_swap_i_14 ;

  // rule RL_m_rl_swap_i_16
  assign WILL_FIRE_RL_m_rl_swap_i_16 =
	     ((m_arr_16[24] && m_arr_17[24]) ?
		!IF_m_arr_16_55_BIT_24_56_THEN_m_arr_16_55_BITS_ETC___d170 :
		!m_arr_16[24] && m_arr_17[24]) &&
	     !WILL_FIRE_RL_m_rl_swap_i_15 ;

  // rule RL_m_rl_swap_i_17
  assign WILL_FIRE_RL_m_rl_swap_i_17 =
	     ((m_arr_17[24] && m_arr_18[24]) ?
		!IF_m_arr_17_65_BIT_24_66_THEN_m_arr_17_65_BITS_ETC___d180 :
		!m_arr_17[24] && m_arr_18[24]) &&
	     !WILL_FIRE_RL_m_rl_swap_i_16 ;

  // rule RL_m_rl_swap_i_18
  assign WILL_FIRE_RL_m_rl_swap_i_18 =
	     ((m_arr_18[24] && m_arr_19[24]) ?
		!IF_m_arr_18_75_BIT_24_76_THEN_m_arr_18_75_BITS_ETC___d190 :
		!m_arr_18[24] && m_arr_19[24]) &&
	     !WILL_FIRE_RL_m_rl_swap_i_17 ;

  // inputs to muxes for submodule ports
  assign MUX_m_counter$write_1__SEL_1 = EN_get && !m_arr_1[24] ;
  assign MUX_m_arr_19$write_1__VAL_3 = { 1'd1, put_x } ;
  assign MUX_m_counter$write_1__VAL_2 = m_counter + 16'd1 ;

  // register m_arr_0
  assign m_arr_0$D_IN = m_arr_1 ;
  assign m_arr_0$EN = WILL_FIRE_RL_m_rl_swap_i || EN_get ;

  // register m_arr_1
  assign m_arr_1$D_IN = WILL_FIRE_RL_m_rl_swap_i ? m_arr_0 : m_arr_2 ;
  assign m_arr_1$EN =
	     WILL_FIRE_RL_m_rl_swap_i || WILL_FIRE_RL_m_rl_swap_i_1 ||
	     EN_get ;

  // register m_arr_10
  assign m_arr_10$D_IN = WILL_FIRE_RL_m_rl_swap_i_9 ? m_arr_9 : m_arr_11 ;
  assign m_arr_10$EN =
	     WILL_FIRE_RL_m_rl_swap_i_9 || WILL_FIRE_RL_m_rl_swap_i_10 ||
	     EN_get ;

  // register m_arr_11
  assign m_arr_11$D_IN = WILL_FIRE_RL_m_rl_swap_i_10 ? m_arr_10 : m_arr_12 ;
  assign m_arr_11$EN =
	     WILL_FIRE_RL_m_rl_swap_i_10 || WILL_FIRE_RL_m_rl_swap_i_11 ||
	     EN_get ;

  // register m_arr_12
  assign m_arr_12$D_IN = WILL_FIRE_RL_m_rl_swap_i_11 ? m_arr_11 : m_arr_13 ;
  assign m_arr_12$EN =
	     WILL_FIRE_RL_m_rl_swap_i_11 || WILL_FIRE_RL_m_rl_swap_i_12 ||
	     EN_get ;

  // register m_arr_13
  assign m_arr_13$D_IN = WILL_FIRE_RL_m_rl_swap_i_12 ? m_arr_12 : m_arr_14 ;
  assign m_arr_13$EN =
	     WILL_FIRE_RL_m_rl_swap_i_12 || WILL_FIRE_RL_m_rl_swap_i_13 ||
	     EN_get ;

  // register m_arr_14
  assign m_arr_14$D_IN = WILL_FIRE_RL_m_rl_swap_i_13 ? m_arr_13 : m_arr_15 ;
  assign m_arr_14$EN =
	     WILL_FIRE_RL_m_rl_swap_i_13 || WILL_FIRE_RL_m_rl_swap_i_14 ||
	     EN_get ;

  // register m_arr_15
  assign m_arr_15$D_IN = WILL_FIRE_RL_m_rl_swap_i_14 ? m_arr_14 : m_arr_16 ;
  assign m_arr_15$EN =
	     WILL_FIRE_RL_m_rl_swap_i_14 || WILL_FIRE_RL_m_rl_swap_i_15 ||
	     EN_get ;

  // register m_arr_16
  assign m_arr_16$D_IN = WILL_FIRE_RL_m_rl_swap_i_15 ? m_arr_15 : m_arr_17 ;
  assign m_arr_16$EN =
	     WILL_FIRE_RL_m_rl_swap_i_15 || WILL_FIRE_RL_m_rl_swap_i_16 ||
	     EN_get ;

  // register m_arr_17
  assign m_arr_17$D_IN = WILL_FIRE_RL_m_rl_swap_i_16 ? m_arr_16 : m_arr_18 ;
  assign m_arr_17$EN =
	     WILL_FIRE_RL_m_rl_swap_i_16 || WILL_FIRE_RL_m_rl_swap_i_17 ||
	     EN_get ;

  // register m_arr_18
  assign m_arr_18$D_IN = WILL_FIRE_RL_m_rl_swap_i_17 ? m_arr_17 : m_arr_19 ;
  assign m_arr_18$EN =
	     WILL_FIRE_RL_m_rl_swap_i_17 || WILL_FIRE_RL_m_rl_swap_i_18 ||
	     EN_get ;

  // register m_arr_19
  always@(WILL_FIRE_RL_m_rl_swap_i_18 or
	  m_arr_18 or EN_get or EN_put or MUX_m_arr_19$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_m_rl_swap_i_18: m_arr_19$D_IN = m_arr_18;
      EN_get: m_arr_19$D_IN = 25'd11184810;
      EN_put: m_arr_19$D_IN = MUX_m_arr_19$write_1__VAL_3;
      default: m_arr_19$D_IN =
		   25'b0101010101010101010101010 /* unspecified value */ ;
    endcase
  end
  assign m_arr_19$EN = WILL_FIRE_RL_m_rl_swap_i_18 || EN_get || EN_put ;

  // register m_arr_2
  assign m_arr_2$D_IN = WILL_FIRE_RL_m_rl_swap_i_1 ? m_arr_1 : m_arr_3 ;
  assign m_arr_2$EN =
	     WILL_FIRE_RL_m_rl_swap_i_1 || WILL_FIRE_RL_m_rl_swap_i_2 ||
	     EN_get ;

  // register m_arr_3
  assign m_arr_3$D_IN = WILL_FIRE_RL_m_rl_swap_i_2 ? m_arr_2 : m_arr_4 ;
  assign m_arr_3$EN =
	     WILL_FIRE_RL_m_rl_swap_i_2 || WILL_FIRE_RL_m_rl_swap_i_3 ||
	     EN_get ;

  // register m_arr_4
  assign m_arr_4$D_IN = WILL_FIRE_RL_m_rl_swap_i_3 ? m_arr_3 : m_arr_5 ;
  assign m_arr_4$EN =
	     WILL_FIRE_RL_m_rl_swap_i_3 || WILL_FIRE_RL_m_rl_swap_i_4 ||
	     EN_get ;

  // register m_arr_5
  assign m_arr_5$D_IN = WILL_FIRE_RL_m_rl_swap_i_4 ? m_arr_4 : m_arr_6 ;
  assign m_arr_5$EN =
	     WILL_FIRE_RL_m_rl_swap_i_4 || WILL_FIRE_RL_m_rl_swap_i_5 ||
	     EN_get ;

  // register m_arr_6
  assign m_arr_6$D_IN = WILL_FIRE_RL_m_rl_swap_i_5 ? m_arr_5 : m_arr_7 ;
  assign m_arr_6$EN =
	     WILL_FIRE_RL_m_rl_swap_i_5 || WILL_FIRE_RL_m_rl_swap_i_6 ||
	     EN_get ;

  // register m_arr_7
  assign m_arr_7$D_IN = WILL_FIRE_RL_m_rl_swap_i_6 ? m_arr_6 : m_arr_8 ;
  assign m_arr_7$EN =
	     WILL_FIRE_RL_m_rl_swap_i_6 || WILL_FIRE_RL_m_rl_swap_i_7 ||
	     EN_get ;

  // register m_arr_8
  assign m_arr_8$D_IN = WILL_FIRE_RL_m_rl_swap_i_7 ? m_arr_7 : m_arr_9 ;
  assign m_arr_8$EN =
	     WILL_FIRE_RL_m_rl_swap_i_7 || WILL_FIRE_RL_m_rl_swap_i_8 ||
	     EN_get ;

  // register m_arr_9
  assign m_arr_9$D_IN = WILL_FIRE_RL_m_rl_swap_i_8 ? m_arr_8 : m_arr_10 ;
  assign m_arr_9$EN =
	     WILL_FIRE_RL_m_rl_swap_i_8 || WILL_FIRE_RL_m_rl_swap_i_9 ||
	     EN_get ;

  // register m_counter
  assign m_counter$D_IN =
	     MUX_m_counter$write_1__SEL_1 ?
	       16'd0 :
	       MUX_m_counter$write_1__VAL_2 ;
  assign m_counter$EN = EN_get && !m_arr_1[24] || EN_put ;

  // remaining internal signals
  assign IF_m_arr_0_BIT_24_THEN_m_arr_0_BITS_23_TO_0_EL_ETC___d10 =
	     m_arr_0[23:0] <= m_arr_1[23:0] ;
  assign IF_m_arr_10_5_BIT_24_6_THEN_m_arr_10_5_BITS_23_ETC___d110 =
	     m_arr_10[23:0] <= m_arr_11[23:0] ;
  assign IF_m_arr_11_05_BIT_24_06_THEN_m_arr_11_05_BITS_ETC___d120 =
	     m_arr_11[23:0] <= m_arr_12[23:0] ;
  assign IF_m_arr_12_15_BIT_24_16_THEN_m_arr_12_15_BITS_ETC___d130 =
	     m_arr_12[23:0] <= m_arr_13[23:0] ;
  assign IF_m_arr_13_25_BIT_24_26_THEN_m_arr_13_25_BITS_ETC___d140 =
	     m_arr_13[23:0] <= m_arr_14[23:0] ;
  assign IF_m_arr_14_35_BIT_24_36_THEN_m_arr_14_35_BITS_ETC___d150 =
	     m_arr_14[23:0] <= m_arr_15[23:0] ;
  assign IF_m_arr_15_45_BIT_24_46_THEN_m_arr_15_45_BITS_ETC___d160 =
	     m_arr_15[23:0] <= m_arr_16[23:0] ;
  assign IF_m_arr_16_55_BIT_24_56_THEN_m_arr_16_55_BITS_ETC___d170 =
	     m_arr_16[23:0] <= m_arr_17[23:0] ;
  assign IF_m_arr_17_65_BIT_24_66_THEN_m_arr_17_65_BITS_ETC___d180 =
	     m_arr_17[23:0] <= m_arr_18[23:0] ;
  assign IF_m_arr_18_75_BIT_24_76_THEN_m_arr_18_75_BITS_ETC___d190 =
	     m_arr_18[23:0] <= m_arr_19[23:0] ;
  assign IF_m_arr_1_BIT_24_THEN_m_arr_1_BITS_23_TO_0_EL_ETC___d20 =
	     m_arr_1[23:0] <= m_arr_2[23:0] ;
  assign IF_m_arr_2_5_BIT_24_6_THEN_m_arr_2_5_BITS_23_T_ETC___d30 =
	     m_arr_2[23:0] <= m_arr_3[23:0] ;
  assign IF_m_arr_3_5_BIT_24_6_THEN_m_arr_3_5_BITS_23_T_ETC___d40 =
	     m_arr_3[23:0] <= m_arr_4[23:0] ;
  assign IF_m_arr_4_5_BIT_24_6_THEN_m_arr_4_5_BITS_23_T_ETC___d50 =
	     m_arr_4[23:0] <= m_arr_5[23:0] ;
  assign IF_m_arr_5_5_BIT_24_6_THEN_m_arr_5_5_BITS_23_T_ETC___d60 =
	     m_arr_5[23:0] <= m_arr_6[23:0] ;
  assign IF_m_arr_6_5_BIT_24_6_THEN_m_arr_6_5_BITS_23_T_ETC___d70 =
	     m_arr_6[23:0] <= m_arr_7[23:0] ;
  assign IF_m_arr_7_5_BIT_24_6_THEN_m_arr_7_5_BITS_23_T_ETC___d80 =
	     m_arr_7[23:0] <= m_arr_8[23:0] ;
  assign IF_m_arr_8_5_BIT_24_6_THEN_m_arr_8_5_BITS_23_T_ETC___d90 =
	     m_arr_8[23:0] <= m_arr_9[23:0] ;
  assign IF_m_arr_9_5_BIT_24_6_THEN_m_arr_9_5_BITS_23_T_ETC___d100 =
	     m_arr_9[23:0] <= m_arr_10[23:0] ;
  assign m_counter_96_EQ_20_01_AND_NOT_m_arr_1_BIT_24_2_ETC___d207 =
	     m_counter == 16'd20 &&
	     (!m_arr_1[24] ||
	      IF_m_arr_0_BIT_24_THEN_m_arr_0_BITS_23_TO_0_EL_ETC___d10) &&
	     ((m_arr_1[24] && m_arr_2[24]) ?
		IF_m_arr_1_BIT_24_THEN_m_arr_1_BITS_23_TO_0_EL_ETC___d20 :
		m_arr_1[24] || !m_arr_2[24]) ;
  assign m_counter_96_EQ_20_01_AND_NOT_m_arr_1_BIT_24_2_ETC___d219 =
	     m_counter_96_EQ_20_01_AND_NOT_m_arr_1_BIT_24_2_ETC___d207 &&
	     ((m_arr_2[24] && m_arr_3[24]) ?
		IF_m_arr_2_5_BIT_24_6_THEN_m_arr_2_5_BITS_23_T_ETC___d30 :
		m_arr_2[24] || !m_arr_3[24]) &&
	     ((m_arr_3[24] && m_arr_4[24]) ?
		IF_m_arr_3_5_BIT_24_6_THEN_m_arr_3_5_BITS_23_T_ETC___d40 :
		m_arr_3[24] || !m_arr_4[24]) &&
	     ((m_arr_4[24] && m_arr_5[24]) ?
		IF_m_arr_4_5_BIT_24_6_THEN_m_arr_4_5_BITS_23_T_ETC___d50 :
		m_arr_4[24] || !m_arr_5[24]) ;
  assign m_counter_96_EQ_20_01_AND_NOT_m_arr_1_BIT_24_2_ETC___d231 =
	     m_counter_96_EQ_20_01_AND_NOT_m_arr_1_BIT_24_2_ETC___d219 &&
	     ((m_arr_5[24] && m_arr_6[24]) ?
		IF_m_arr_5_5_BIT_24_6_THEN_m_arr_5_5_BITS_23_T_ETC___d60 :
		m_arr_5[24] || !m_arr_6[24]) &&
	     ((m_arr_6[24] && m_arr_7[24]) ?
		IF_m_arr_6_5_BIT_24_6_THEN_m_arr_6_5_BITS_23_T_ETC___d70 :
		m_arr_6[24] || !m_arr_7[24]) &&
	     ((m_arr_7[24] && m_arr_8[24]) ?
		IF_m_arr_7_5_BIT_24_6_THEN_m_arr_7_5_BITS_23_T_ETC___d80 :
		m_arr_7[24] || !m_arr_8[24]) ;
  assign m_counter_96_EQ_20_01_AND_NOT_m_arr_1_BIT_24_2_ETC___d243 =
	     m_counter_96_EQ_20_01_AND_NOT_m_arr_1_BIT_24_2_ETC___d231 &&
	     ((m_arr_8[24] && m_arr_9[24]) ?
		IF_m_arr_8_5_BIT_24_6_THEN_m_arr_8_5_BITS_23_T_ETC___d90 :
		m_arr_8[24] || !m_arr_9[24]) &&
	     ((m_arr_9[24] && m_arr_10[24]) ?
		IF_m_arr_9_5_BIT_24_6_THEN_m_arr_9_5_BITS_23_T_ETC___d100 :
		m_arr_9[24] || !m_arr_10[24]) &&
	     ((m_arr_10[24] && m_arr_11[24]) ?
		IF_m_arr_10_5_BIT_24_6_THEN_m_arr_10_5_BITS_23_ETC___d110 :
		m_arr_10[24] || !m_arr_11[24]) ;
  assign m_counter_96_EQ_20_01_AND_NOT_m_arr_1_BIT_24_2_ETC___d255 =
	     m_counter_96_EQ_20_01_AND_NOT_m_arr_1_BIT_24_2_ETC___d243 &&
	     ((m_arr_11[24] && m_arr_12[24]) ?
		IF_m_arr_11_05_BIT_24_06_THEN_m_arr_11_05_BITS_ETC___d120 :
		m_arr_11[24] || !m_arr_12[24]) &&
	     ((m_arr_12[24] && m_arr_13[24]) ?
		IF_m_arr_12_15_BIT_24_16_THEN_m_arr_12_15_BITS_ETC___d130 :
		m_arr_12[24] || !m_arr_13[24]) &&
	     ((m_arr_13[24] && m_arr_14[24]) ?
		IF_m_arr_13_25_BIT_24_26_THEN_m_arr_13_25_BITS_ETC___d140 :
		m_arr_13[24] || !m_arr_14[24]) ;
  assign m_counter_96_EQ_20_01_AND_NOT_m_arr_1_BIT_24_2_ETC___d267 =
	     m_counter_96_EQ_20_01_AND_NOT_m_arr_1_BIT_24_2_ETC___d255 &&
	     ((m_arr_14[24] && m_arr_15[24]) ?
		IF_m_arr_14_35_BIT_24_36_THEN_m_arr_14_35_BITS_ETC___d150 :
		m_arr_14[24] || !m_arr_15[24]) &&
	     ((m_arr_15[24] && m_arr_16[24]) ?
		IF_m_arr_15_45_BIT_24_46_THEN_m_arr_15_45_BITS_ETC___d160 :
		m_arr_15[24] || !m_arr_16[24]) &&
	     ((m_arr_16[24] && m_arr_17[24]) ?
		IF_m_arr_16_55_BIT_24_56_THEN_m_arr_16_55_BITS_ETC___d170 :
		m_arr_16[24] || !m_arr_17[24]) ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        m_arr_0 <= `BSV_ASSIGNMENT_DELAY 25'd11184810;
	m_arr_1 <= `BSV_ASSIGNMENT_DELAY 25'd11184810;
	m_arr_10 <= `BSV_ASSIGNMENT_DELAY 25'd11184810;
	m_arr_11 <= `BSV_ASSIGNMENT_DELAY 25'd11184810;
	m_arr_12 <= `BSV_ASSIGNMENT_DELAY 25'd11184810;
	m_arr_13 <= `BSV_ASSIGNMENT_DELAY 25'd11184810;
	m_arr_14 <= `BSV_ASSIGNMENT_DELAY 25'd11184810;
	m_arr_15 <= `BSV_ASSIGNMENT_DELAY 25'd11184810;
	m_arr_16 <= `BSV_ASSIGNMENT_DELAY 25'd11184810;
	m_arr_17 <= `BSV_ASSIGNMENT_DELAY 25'd11184810;
	m_arr_18 <= `BSV_ASSIGNMENT_DELAY 25'd11184810;
	m_arr_19 <= `BSV_ASSIGNMENT_DELAY 25'd11184810;
	m_arr_2 <= `BSV_ASSIGNMENT_DELAY 25'd11184810;
	m_arr_3 <= `BSV_ASSIGNMENT_DELAY 25'd11184810;
	m_arr_4 <= `BSV_ASSIGNMENT_DELAY 25'd11184810;
	m_arr_5 <= `BSV_ASSIGNMENT_DELAY 25'd11184810;
	m_arr_6 <= `BSV_ASSIGNMENT_DELAY 25'd11184810;
	m_arr_7 <= `BSV_ASSIGNMENT_DELAY 25'd11184810;
	m_arr_8 <= `BSV_ASSIGNMENT_DELAY 25'd11184810;
	m_arr_9 <= `BSV_ASSIGNMENT_DELAY 25'd11184810;
	m_counter <= `BSV_ASSIGNMENT_DELAY 16'd0;
      end
    else
      begin
        if (m_arr_0$EN) m_arr_0 <= `BSV_ASSIGNMENT_DELAY m_arr_0$D_IN;
	if (m_arr_1$EN) m_arr_1 <= `BSV_ASSIGNMENT_DELAY m_arr_1$D_IN;
	if (m_arr_10$EN) m_arr_10 <= `BSV_ASSIGNMENT_DELAY m_arr_10$D_IN;
	if (m_arr_11$EN) m_arr_11 <= `BSV_ASSIGNMENT_DELAY m_arr_11$D_IN;
	if (m_arr_12$EN) m_arr_12 <= `BSV_ASSIGNMENT_DELAY m_arr_12$D_IN;
	if (m_arr_13$EN) m_arr_13 <= `BSV_ASSIGNMENT_DELAY m_arr_13$D_IN;
	if (m_arr_14$EN) m_arr_14 <= `BSV_ASSIGNMENT_DELAY m_arr_14$D_IN;
	if (m_arr_15$EN) m_arr_15 <= `BSV_ASSIGNMENT_DELAY m_arr_15$D_IN;
	if (m_arr_16$EN) m_arr_16 <= `BSV_ASSIGNMENT_DELAY m_arr_16$D_IN;
	if (m_arr_17$EN) m_arr_17 <= `BSV_ASSIGNMENT_DELAY m_arr_17$D_IN;
	if (m_arr_18$EN) m_arr_18 <= `BSV_ASSIGNMENT_DELAY m_arr_18$D_IN;
	if (m_arr_19$EN) m_arr_19 <= `BSV_ASSIGNMENT_DELAY m_arr_19$D_IN;
	if (m_arr_2$EN) m_arr_2 <= `BSV_ASSIGNMENT_DELAY m_arr_2$D_IN;
	if (m_arr_3$EN) m_arr_3 <= `BSV_ASSIGNMENT_DELAY m_arr_3$D_IN;
	if (m_arr_4$EN) m_arr_4 <= `BSV_ASSIGNMENT_DELAY m_arr_4$D_IN;
	if (m_arr_5$EN) m_arr_5 <= `BSV_ASSIGNMENT_DELAY m_arr_5$D_IN;
	if (m_arr_6$EN) m_arr_6 <= `BSV_ASSIGNMENT_DELAY m_arr_6$D_IN;
	if (m_arr_7$EN) m_arr_7 <= `BSV_ASSIGNMENT_DELAY m_arr_7$D_IN;
	if (m_arr_8$EN) m_arr_8 <= `BSV_ASSIGNMENT_DELAY m_arr_8$D_IN;
	if (m_arr_9$EN) m_arr_9 <= `BSV_ASSIGNMENT_DELAY m_arr_9$D_IN;
	if (m_counter$EN) m_counter <= `BSV_ASSIGNMENT_DELAY m_counter$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    m_arr_0 = 25'h0AAAAAA;
    m_arr_1 = 25'h0AAAAAA;
    m_arr_10 = 25'h0AAAAAA;
    m_arr_11 = 25'h0AAAAAA;
    m_arr_12 = 25'h0AAAAAA;
    m_arr_13 = 25'h0AAAAAA;
    m_arr_14 = 25'h0AAAAAA;
    m_arr_15 = 25'h0AAAAAA;
    m_arr_16 = 25'h0AAAAAA;
    m_arr_17 = 25'h0AAAAAA;
    m_arr_18 = 25'h0AAAAAA;
    m_arr_19 = 25'h0AAAAAA;
    m_arr_2 = 25'h0AAAAAA;
    m_arr_3 = 25'h0AAAAAA;
    m_arr_4 = 25'h0AAAAAA;
    m_arr_5 = 25'h0AAAAAA;
    m_arr_6 = 25'h0AAAAAA;
    m_arr_7 = 25'h0AAAAAA;
    m_arr_8 = 25'h0AAAAAA;
    m_arr_9 = 25'h0AAAAAA;
    m_counter = 16'hAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkBubbleSort_nt_UInt20

